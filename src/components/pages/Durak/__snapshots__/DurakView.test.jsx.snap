// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DurakViFew /> renders correctly 1`] = `
<DurakView
  location={
    Object {
      "state": Object {
        "roomname": "Room",
        "username": "Test",
      },
    }
  }
>
  <div
    className="makeStyles-main-1"
  >
    <WithStyles(ForwardRef(Paper))
      className="makeStyles-paper-2"
    >
      <ForwardRef(Paper)
        className="makeStyles-paper-2"
        classes={
          Object {
            "elevation0": "MuiPaper-elevation0",
            "elevation1": "MuiPaper-elevation1",
            "elevation10": "MuiPaper-elevation10",
            "elevation11": "MuiPaper-elevation11",
            "elevation12": "MuiPaper-elevation12",
            "elevation13": "MuiPaper-elevation13",
            "elevation14": "MuiPaper-elevation14",
            "elevation15": "MuiPaper-elevation15",
            "elevation16": "MuiPaper-elevation16",
            "elevation17": "MuiPaper-elevation17",
            "elevation18": "MuiPaper-elevation18",
            "elevation19": "MuiPaper-elevation19",
            "elevation2": "MuiPaper-elevation2",
            "elevation20": "MuiPaper-elevation20",
            "elevation21": "MuiPaper-elevation21",
            "elevation22": "MuiPaper-elevation22",
            "elevation23": "MuiPaper-elevation23",
            "elevation24": "MuiPaper-elevation24",
            "elevation3": "MuiPaper-elevation3",
            "elevation4": "MuiPaper-elevation4",
            "elevation5": "MuiPaper-elevation5",
            "elevation6": "MuiPaper-elevation6",
            "elevation7": "MuiPaper-elevation7",
            "elevation8": "MuiPaper-elevation8",
            "elevation9": "MuiPaper-elevation9",
            "outlined": "MuiPaper-outlined",
            "root": "MuiPaper-root",
            "rounded": "MuiPaper-rounded",
          }
        }
      >
        <div
          className="MuiPaper-root makeStyles-paper-2 MuiPaper-elevation1 MuiPaper-rounded"
        >
          <WithStyles(ForwardRef(Typography))
            style={
              Object {
                "textAlign": "center",
              }
            }
            variant="h4"
          >
            <ForwardRef(Typography)
              classes={
                Object {
                  "alignCenter": "MuiTypography-alignCenter",
                  "alignJustify": "MuiTypography-alignJustify",
                  "alignLeft": "MuiTypography-alignLeft",
                  "alignRight": "MuiTypography-alignRight",
                  "body1": "MuiTypography-body1",
                  "body2": "MuiTypography-body2",
                  "button": "MuiTypography-button",
                  "caption": "MuiTypography-caption",
                  "colorError": "MuiTypography-colorError",
                  "colorInherit": "MuiTypography-colorInherit",
                  "colorPrimary": "MuiTypography-colorPrimary",
                  "colorSecondary": "MuiTypography-colorSecondary",
                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                  "displayBlock": "MuiTypography-displayBlock",
                  "displayInline": "MuiTypography-displayInline",
                  "gutterBottom": "MuiTypography-gutterBottom",
                  "h1": "MuiTypography-h1",
                  "h2": "MuiTypography-h2",
                  "h3": "MuiTypography-h3",
                  "h4": "MuiTypography-h4",
                  "h5": "MuiTypography-h5",
                  "h6": "MuiTypography-h6",
                  "noWrap": "MuiTypography-noWrap",
                  "overline": "MuiTypography-overline",
                  "paragraph": "MuiTypography-paragraph",
                  "root": "MuiTypography-root",
                  "srOnly": "MuiTypography-srOnly",
                  "subtitle1": "MuiTypography-subtitle1",
                  "subtitle2": "MuiTypography-subtitle2",
                }
              }
              style={
                Object {
                  "textAlign": "center",
                }
              }
              variant="h4"
            >
              <h4
                className="MuiTypography-root MuiTypography-h4"
                style={
                  Object {
                    "textAlign": "center",
                  }
                }
              >
                Room
              </h4>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
          <WithStyles(ForwardRef(Divider))
            light={true}
            style={
              Object {
                "marginBottom": "1rem",
              }
            }
          >
            <ForwardRef(Divider)
              classes={
                Object {
                  "absolute": "MuiDivider-absolute",
                  "flexItem": "MuiDivider-flexItem",
                  "inset": "MuiDivider-inset",
                  "light": "MuiDivider-light",
                  "middle": "MuiDivider-middle",
                  "root": "MuiDivider-root",
                  "vertical": "MuiDivider-vertical",
                }
              }
              light={true}
              style={
                Object {
                  "marginBottom": "1rem",
                }
              }
            >
              <hr
                className="MuiDivider-root MuiDivider-light"
                style={
                  Object {
                    "marginBottom": "1rem",
                  }
                }
              />
            </ForwardRef(Divider)>
          </WithStyles(ForwardRef(Divider))>
          <div
            key="1"
          >
            <WithStyles(ForwardRef(Button))
              color="secondary"
              onClick={[Function]}
              variant="contained"
            >
              <ForwardRef(Button)
                classes={
                  Object {
                    "colorInherit": "MuiButton-colorInherit",
                    "contained": "MuiButton-contained",
                    "containedPrimary": "MuiButton-containedPrimary",
                    "containedSecondary": "MuiButton-containedSecondary",
                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                    "disableElevation": "MuiButton-disableElevation",
                    "disabled": "Mui-disabled",
                    "endIcon": "MuiButton-endIcon",
                    "focusVisible": "Mui-focusVisible",
                    "fullWidth": "MuiButton-fullWidth",
                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                    "label": "MuiButton-label",
                    "outlined": "MuiButton-outlined",
                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                    "root": "MuiButton-root",
                    "sizeLarge": "MuiButton-sizeLarge",
                    "sizeSmall": "MuiButton-sizeSmall",
                    "startIcon": "MuiButton-startIcon",
                    "text": "MuiButton-text",
                    "textPrimary": "MuiButton-textPrimary",
                    "textSecondary": "MuiButton-textSecondary",
                    "textSizeLarge": "MuiButton-textSizeLarge",
                    "textSizeSmall": "MuiButton-textSizeSmall",
                  }
                }
                color="secondary"
                onClick={[Function]}
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <ForwardRef(ButtonBase)
                    className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "focusVisible": "Mui-focusVisible",
                        "root": "MuiButtonBase-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="MuiButton-label"
                      >
                        <WithStyles(ForwardRef(Typography))>
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                          >
                            <p
                              className="MuiTypography-root MuiTypography-body1"
                            >
                              Ready
                            </p>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                      </span>
                      <NoSsr>
                        <WithStyles(memo)
                          center={false}
                        >
                          <ForwardRef(TouchRipple)
                            center={false}
                            classes={
                              Object {
                                "child": "MuiTouchRipple-child",
                                "childLeaving": "MuiTouchRipple-childLeaving",
                                "childPulsate": "MuiTouchRipple-childPulsate",
                                "ripple": "MuiTouchRipple-ripple",
                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                "root": "MuiTouchRipple-root",
                              }
                            }
                          >
                            <span
                              className="MuiTouchRipple-root"
                            >
                              <TransitionGroup
                                childFactory={[Function]}
                                component={null}
                                exit={true}
                              />
                            </span>
                          </ForwardRef(TouchRipple)>
                        </WithStyles(memo)>
                      </NoSsr>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </div>
        </div>
      </ForwardRef(Paper)>
    </WithStyles(ForwardRef(Paper))>
  </div>
</DurakView>
`;
